// Generated by rstantools.  Do not edit by hand.

/*
    mrbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mrbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mrbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_mregger_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mregger");
    reader.add_event(97, 95, "end", "model_mregger");
    return reader;
}
#include <stan_meta_header.hpp>
class model_mregger : public prob_grad {
private:
        int n;
        vector_d ybeta;
        vector_d xbeta;
        vector_d weights;
        double rho;
        int prior;
        vector_d tau;
        vector_d mu;
public:
    model_mregger(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mregger(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mregger_namespace::model_mregger";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("ybeta", "n", n);
            context__.validate_dims("data initialization", "ybeta", "vector_d", context__.to_vec(n));
            ybeta = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("ybeta");
            pos__ = 0;
            size_t ybeta_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < ybeta_j_1_max__; ++j_1__) {
                ybeta(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("xbeta", "n", n);
            context__.validate_dims("data initialization", "xbeta", "vector_d", context__.to_vec(n));
            xbeta = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("xbeta");
            pos__ = 0;
            size_t xbeta_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < xbeta_j_1_max__; ++j_1__) {
                xbeta(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("weights", "n", n);
            context__.validate_dims("data initialization", "weights", "vector_d", context__.to_vec(n));
            weights = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("weights");
            pos__ = 0;
            size_t weights_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < weights_j_1_max__; ++j_1__) {
                weights(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "rho", "double", context__.to_vec());
            rho = double(0);
            vals_r__ = context__.vals_r("rho");
            pos__ = 0;
            rho = vals_r__[pos__++];
            check_greater_or_equal(function__, "rho", rho, -(1));
            check_less_or_equal(function__, "rho", rho, 1);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "prior", "int", context__.to_vec());
            prior = int(0);
            vals_i__ = context__.vals_i("prior");
            pos__ = 0;
            prior = vals_i__[pos__++];
            check_greater_or_equal(function__, "prior", prior, 1);
            check_less_or_equal(function__, "prior", prior, 4);
            // initialize transformed data variables
            current_statement_begin__ = 25;
            validate_non_negative_index("tau", "2", 2);
            tau = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            stan::math::fill(tau, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("mu", "2", 2);
            mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            stan::math::fill(mu, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 27;
            for (int i = 1; i <= 2; ++i) {
                current_statement_begin__ = 28;
                stan::model::assign(tau, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            10, 
                            "assigning variable tau");
                current_statement_begin__ = 29;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable mu");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 35;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mregger() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 35;
        if (!(context__.contains_r("intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "intercept", "double", context__.to_vec());
        double intercept(0);
        intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 36;
        if (!(context__.contains_r("estimate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable estimate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("estimate");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "estimate", "double", context__.to_vec());
        double estimate(0);
        estimate = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(estimate);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable estimate: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 37;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 35;
            local_scalar_t__ intercept;
            (void) intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                intercept = in__.scalar_constrain(lp__);
            else
                intercept = in__.scalar_constrain();
            current_statement_begin__ = 36;
            local_scalar_t__ estimate;
            (void) estimate;  // dummy to suppress unused var warning
            if (jacobian__)
                estimate = in__.scalar_constrain(lp__);
            else
                estimate = in__.scalar_constrain();
            current_statement_begin__ = 37;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_constrain(lp__);
            else
                sigma = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("eta", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(2);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("Sigma", "2", 2);
            validate_non_negative_index("Sigma", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(2, 2);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 46;
            stan::model::assign(eta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        intercept, 
                        "assigning variable eta");
            current_statement_begin__ = 47;
            stan::model::assign(eta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        estimate, 
                        "assigning variable eta");
            current_statement_begin__ = 49;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        square(get_base1(tau, 1, "tau", 1)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 50;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        square(get_base1(tau, 2, "tau", 1)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 51;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((rho * get_base1(tau, 1, "tau", 1)) * get_base1(tau, 2, "tau", 1)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 52;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        get_base1(Sigma, 1, 2, "Sigma", 1), 
                        "assigning variable Sigma");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            size_t eta_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 44;
            size_t Sigma_j_1_max__ = 2;
            size_t Sigma_j_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Sigma(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Sigma" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cov_matrix(function__, "Sigma", Sigma);
            // model body
            current_statement_begin__ = 59;
            if (as_bool(logical_eq(prior, 1))) {
                current_statement_begin__ = 60;
                lp_accum__.add(normal_log<propto__>(intercept, 0, 10));
                current_statement_begin__ = 61;
                lp_accum__.add(normal_log<propto__>(estimate, 0, 100));
                current_statement_begin__ = 62;
                lp_accum__.add(uniform_log<propto__>(sigma, 1, 10));
                current_statement_begin__ = 65;
                lp_accum__.add(normal_log<propto__>(ybeta, add(multiply(intercept, weights), multiply(xbeta, estimate)), sigma));
            } else if (as_bool(logical_eq(prior, 2))) {
                current_statement_begin__ = 69;
                lp_accum__.add(normal_log<propto__>(intercept, 0, 10));
                current_statement_begin__ = 70;
                lp_accum__.add(normal_log<propto__>(estimate, 0, 10));
                current_statement_begin__ = 71;
                lp_accum__.add(uniform_log<propto__>(sigma, 1, 10));
                current_statement_begin__ = 74;
                lp_accum__.add(normal_log<propto__>(ybeta, add(multiply(intercept, weights), multiply(xbeta, estimate)), sigma));
            } else if (as_bool(logical_eq(prior, 3))) {
                current_statement_begin__ = 78;
                lp_accum__.add(normal_log<propto__>(intercept, 0, 10));
                current_statement_begin__ = 79;
                lp_accum__.add(cauchy_log<propto__>(estimate, 0, 1));
                current_statement_begin__ = 80;
                lp_accum__.add(inv_gamma_log<propto__>(sigma, 0.5, 0.5));
                current_statement_begin__ = 83;
                lp_accum__.add(normal_log<propto__>(ybeta, add(multiply(intercept, weights), multiply(xbeta, estimate)), sigma));
            } else {
                current_statement_begin__ = 88;
                lp_accum__.add(multi_normal_log(eta, mu, Sigma));
                current_statement_begin__ = 89;
                lp_accum__.add(uniform_log<propto__>(sigma, 1, 10));
                current_statement_begin__ = 93;
                lp_accum__.add(normal_log<propto__>(ybeta, add(multiply(intercept, weights), multiply(xbeta, estimate)), sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("intercept");
        names__.push_back("estimate");
        names__.push_back("sigma");
        names__.push_back("eta");
        names__.push_back("Sigma");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mregger_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double intercept = in__.scalar_constrain();
        vars__.push_back(intercept);
        double estimate = in__.scalar_constrain();
        vars__.push_back(estimate);
        double sigma = in__.scalar_constrain();
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("eta", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta(2);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("Sigma", "2", 2);
            validate_non_negative_index("Sigma", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Sigma(2, 2);
            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 46;
            stan::model::assign(eta, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        intercept, 
                        "assigning variable eta");
            current_statement_begin__ = 47;
            stan::model::assign(eta, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        estimate, 
                        "assigning variable eta");
            current_statement_begin__ = 49;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        square(get_base1(tau, 1, "tau", 1)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 50;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        square(get_base1(tau, 2, "tau", 1)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 51;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        ((rho * get_base1(tau, 1, "tau", 1)) * get_base1(tau, 2, "tau", 1)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 52;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        get_base1(Sigma, 1, 2, "Sigma", 1), 
                        "assigning variable Sigma");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            stan::math::check_cov_matrix(function__, "Sigma", Sigma);
            // write transformed parameters
            if (include_tparams__) {
                size_t eta_j_1_max__ = 2;
                for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                    vars__.push_back(eta(j_1__));
                }
                size_t Sigma_j_2_max__ = 2;
                size_t Sigma_j_1_max__ = 2;
                for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                        vars__.push_back(Sigma(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_mregger";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "estimate";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Sigma_j_2_max__ = 2;
            size_t Sigma_j_1_max__ = 2;
            for (size_t j_2__ = 0; j_2__ < Sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Sigma" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "estimate";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Sigma_j_1_max__ = (2 + ((2 * (2 - 1)) / 2));
            for (size_t j_1__ = 0; j_1__ < Sigma_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_mregger_namespace::model_mregger stan_model;
#endif
